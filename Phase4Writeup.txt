Team 7 Phase 4 writeup.

Performance Analysis:
Our performance is similar to phase 3, as we only send the DNS response packets to the controller. Phase 3, instead, would just drop the packets instead of figuring out the NAT. All of our NAT-ting is done in a flowmod, so the performance is very good, and the loss of performance is so little that it is impossible to measure in the chaos of the network.

Compared to phase 2, however, we had a lot better performance. Since phase 2 forwarded EVERYTHING to our controller, it had very bad performance. Since we do everything but the DNS responses on the switch using simple flow mods, phase 4 is quite performant.


Questions:

A. Yes, this approach does offer security benefits. Not only does it semi-anonymize the client and server, it also requires a client to go through the proper process of requesting a flow before any packets are accepted from it. Peer to peer applications should still work because 
B. Since our system is not reliant on any specific NAT implementation, new deployment should not be made more difficult. If the current controllers ever switched off, the switches should revert to standard learning switches, allowing the network to operate in the normal, pre-controller state. As long as the p2p application goes through DNS, it will work fine with our implementation of NAT because instead of one global address mapping to several local addresses, we have several global addresses mapping to one local address, so they are still uniquely identifiable. The NAT still needs to go through DNS to request flows.
C. A network like WPI might be able to work, but it would be a lot more complex than our little test setup. Also, anyone doing any sort of communication would require using hostnames, such as student_username-machine.wifi.wpi.edu instead of an ip address, so that the system could set up the flow. Even with machines on the ?LAN?, they would still require to use hostnames instead of IP addresses, since they would still have to go through the switch. The switch would apply the Nat.






How we did stuff.


We have set up 3 switches, one on .1, one on .2, and one on .3


.2 is the DNS switch, and it is set up to forward every packet as usual EXCEPT for DNS response packets, which it sends to the controller.


.1 and .3 are set up the same. In the initial state, they only forward DNS and SSH traffic, and drop everything else.


When the controller gets a forwarded DNS response packet from the .2 switch, it does a number of things.
	Generate NAT IP addresses for both .1 and .3
		Round robin.
	Generate NAT rules for the two switches.
		Send them to the .1 and .3 switches.
	Change the DNS packet:
		Change the .3 or .1 result found in the DNS packet to be the NAT ip address it just generated.
		Find the timestamp.
	Forward the DNS packet.
		Re-generate the UDP packet checksum
		Send back to controller.


Now, the .1 and .3 switches will forward most packets as long as they have a NAT rule, but first applying the translation.





Our packet captures for Phase 3 and Phase 4 can be found under phase3.pcap and phase4.pcap
